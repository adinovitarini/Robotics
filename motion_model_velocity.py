# -*- coding: utf-8 -*-
"""motion_model_velocity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VP6HjgCIF65odFzIj3KLfba_2gWMVl1f

Pada pengendalian posisi dan orientasi robot beroda (wheeled mobile robot) diasumsikan jika pengendalian robot dapat dilakukan melalui pengaturan kecepatan translasi dan rotasi
"""

import math
def prob_normal_dist(a,b):
  p = math.exp(-(a*a)/2*b)/math.sqrt(2*math.pi*b)
  return p
def prob_triangular_dist(a,b):
  if abs(a) > math.sqrt(6*b):
    p = 0 
    return p 
  else:
    p = (math.sqrt(6*b)-abs(a))/(6*b)
    return p
def motion_model_velocity(x_old,y_old,theta_old,v,w,x_new,y_new,theta_new):
  xt = [x_old,y_old,theta_old]
  xtt = [x_new,y_new,theta_new]
  ut = [v,w]
  x = x_old - x_new
  y = y_old - y_new 
  miu = 0.5*(x*math.cos(theta_old)+y*math.sin(theta_old))/(y*math.cos(theta_old)-x*math.sin(theta_old))
  x_star = 0.5*(x_old + x_new)+miu*y
  y_star = 0.5*(y_old + y_new)+miu*(x_new-x_old)
  r_star = math.sqrt((x_old-x_star)*(x_old-x_star)+(y_old-y_star)*(y_old-y_star))
  delta_theta = math.atan2(y_new-y_star,x_new-x_star)-math.atan2(y_old-y_star,x_old-x_star)
  v_hat = delta_theta*r_star 
  w_hat = delta_theta
  gamma_hat = theta_new-theta_old-w_hat
  print('Initial Pose:',xt,'Control Signal:',ut,'Next Pose:',xtt)
  return v-v_hat,w-w_hat,theta_old-gamma_hat
  
print(motion_model_velocity(2,3,90,3,3,1,0.2,90))